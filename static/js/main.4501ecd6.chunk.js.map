{"version":3,"sources":["dumpster.js","const/date.js","util/date.js","components/GarbageDump/WritingArea.js","components/GarbageDump/GarbageDump.js","util/garbage.js","util/string.js","components/Archive/TrashDetail.js","components/Archive/Archive.js","App.js","serviceWorker.js","index.js"],"names":["dumpster","localforage","createInstance","name","months","days","getCurrentDate","localTime","Date","toLocaleString","timeZone","isSameDay","dateA","dateB","toDateString","formatFullDate","date","dayName","getDay","dateName","getDate","monthName","getMonth","yearName","getFullYear","printTimeCompletion","startDate","finishDate","r","structureKeys","delta","Math","abs","result","sTemplate","year","month","week","day","hour","minute","second","structure","forEach","key","Object","keys","floor","countTimePeriod","addS","value","string","shift","join","useStyles","makeStyles","textArea","marginTop","WritingArea","text","setText","loading","classes","TextField","className","multiline","variant","rows","fullWidth","onChange","e","target","disabled","theme","root","height","display","flexDirection","container","padding","overflowY","footer","width","backgroundColor","boxSizing","alignItems","progressWrapper","top","progress","marginRight","flex","count","progressIcon","marginLeft","infoRoot","maxWidth","marginBottom","palette","info","main","refreshIcon","color","GarbageDump","useState","setLoading","saveProgress","debounce","id","content","wordCount","finish","finishedDate","setItem","setFinishedDate","trashId","setTrashId","trashDate","setTrashDate","useEffect","iterate","console","log","JSON","stringify","currDate","getItem","then","res","trashInfo","random","arrValue","indexOf","generateNewGarbage","setCount","dayChanged","setDayChanged","interval","setInterval","clearInterval","str","trimmed","trim","split","length","countWords","setProgress","currProgress","Container","Collapse","in","SnackbarContent","message","action","IconButton","edge","aria-label","title","onClick","window","location","reload","colorPrimary","Typography","LinearProgress","closeButton","position","right","spacing","grey","dialogTitle","borderBottom","dialogContent","whiteSpace","TrashDetail","selectedTrash","setSelectedTrash","Dialog","open","Boolean","fullScreen","onClose","DialogTitle","disableTypography","component","DialogContent","overflow","paddingBottom","cardsContainer","flexWrap","card","margin","minWidth","justifyContent","pagination","Archive","ids","setIds","trashList","setTrashList","totalPage","ceil","page","setPage","getTrashList","useCallback","firstIdx","lastIdx","getGarbage","slice","map","Promise","all","data","fullDate","Card","CardContent","CardActions","Button","size","flexGrow","minHeight","menuButton","list","App","props","history","useHistory","openDrawer","setOpenDrawer","AppBar","Toolbar","Drawer","anchor","role","onKeyDown","List","ListItem","button","selected","pathname","push","ListItemIcon","ListItemText","primary","exact","path","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4501ecd6.chunk.js","sourcesContent":["import localforage from 'localforage';\n\nconst dumpster = localforage.createInstance({\n  name: 'brain-dumpster',\n});\n\nexport default dumpster;\n","export const months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n]\n\nexport const days = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n]\n","import { days, months } from \"const/date\";\n\nexport function getCurrentDate() {\n  const localTime = new Date().toLocaleString(\"en-US\", { timeZone: \"Asia/Jakarta\" });\n  return new Date(localTime);\n}\n\n/**\n * \n * @param {Date} dateA Date object A\n * @param {Date} dateB Date object B\n * @returns {Boolean} are the two compared dates is the same day\n */\nexport function isSameDay(dateA, dateB) {\n  return dateA.toDateString() === dateB.toDateString();\n}\n\n\n/**\n * \n * @param {Date} date date to be formatted\n * @returns {String} formatted date\n */\nexport function formatFullDate(date) {\n  if (!date) return ''\n  const dayName = days[date.getDay()]\n  const dateName = date.getDate()\n  const monthName = months[date.getMonth()]\n  const yearName = date.getFullYear()\n  return `${dayName}, ${dateName} ${monthName} ${yearName}`\n}\n\n/**\n * \n * @param {Date} startDate \n * @param {Date} finishDate \n * @param {Array} structureKeys array of keys to be calculated\n * @returns {Object} object that contains period based on structure key\n */\nexport function countTimePeriod(startDate, finishDate, structureKeys) {\n  let delta = Math.abs(finishDate - startDate) / 1000;\n  const result = {};\n  const sTemplate = {\n    year: 31536000,\n    month: 2592000,\n    week: 604800,\n    day: 86400,\n    hour: 3600,\n    minute: 60,\n    second: 1\n  };\n\n  let structure = {};\n  if (!structureKeys) {\n    structure = {...sTemplate};\n  } else {\n    structureKeys.forEach(key => {\n      structure[key] = sTemplate[key];\n    })\n  }\n\n  Object.keys(structure).forEach(function (key) {\n    result[key] = Math.floor(delta / structure[key]);\n    delta -= result[key] * structure[key];\n  });\n\n  return result;\n}\n\n/**\n * \n * @param {Date} startDate \n * @param {Date} finishDate \n * @returns {String} hours, minutes, second\n */\nexport function printTimeCompletion(startDate, finishDate) {\n  const r = countTimePeriod(startDate, finishDate, ['hour', 'minute', 'second'])\n  const addS = (value) => value > 1 ? 's' : '';\n  const { hour, minute, second } = r;\n  const string = [`${hour} hour${addS(hour)}`, `${minute} minute${addS(minute)}`, `${second} second${addS(second)}`];\n\n  if (!r.hour) {\n    string.shift();\n    if (!r.minute) string.shift()\n  }\n  return string.join(' ');\n}\n","import React from 'react';\nimport { makeStyles, TextField } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  textArea: {\n    marginTop: '16px',\n  },\n}));\n\nconst WritingArea = ({ text, setText, loading }) => {\n  const classes = useStyles();\n\n  const onChangeText = (e) => {\n    const text = e.target.value;\n    setText(text)\n  }\n\n  return (\n    <TextField\n      className={classes.textArea}\n      multiline\n      variant=\"outlined\"\n      rows=\"20\"\n      fullWidth\n      value={text}\n      onChange={onChangeText}\n      disabled={loading}\n    />\n  )\n}\n\nexport default WritingArea;\n","import React, { useEffect, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { Container, LinearProgress, makeStyles, Typography, SnackbarContent, Collapse, IconButton } from '@material-ui/core';\nimport dumpster from 'dumpster';\nimport { generateNewGarbage } from 'util/garbage';\nimport { countWords } from 'util/string';\nimport { isSameDay, getCurrentDate, formatFullDate } from 'util/date';\nimport WritingArea from './WritingArea';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: 'calc(100vh - 64px)',\n    '@media (max-width: 600px)': {\n      height: 'calc(100vh - 56px)',\n    },\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  container: {\n    height: 'calc(100vh - (64px + 3.5rem))',\n    '@media (max-width: 600px)': {\n      height: 'calc(100vh - (56px + 3.5rem))',\n    },\n    padding: '2rem 1rem 3rem',\n    overflowY: 'auto',\n  },\n  footer: {\n    width: '100%',\n    padding: '12px 12px',\n    backgroundColor: 'lightblue',\n    boxSizing: 'border-box',\n    height: '3.5rem',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  progressWrapper: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  loading: {\n    display: 'relative',\n    top: -2,\n  },\n  progress: {\n    height: '20px',\n    marginRight: '12px',\n    flex: 6,\n  },\n  count: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n  },\n  progressIcon: {\n    marginLeft: '8px',\n  },\n  infoRoot: {\n    maxWidth: '615px',\n    marginBottom: '16px',\n    backgroundColor: theme.palette.info.main,\n  },\n  refreshIcon: {\n    color: 'white',\n  }\n}))\n\nconst GarbageDump = () => {\n  const classes = useStyles();\n\n  const [loading, setLoading] = useState(false)\n  const saveProgress = debounce(({ id, content, date, wordCount, finishedDate: finish }) => {\n    if (id) {\n      let finishedDate = finish;\n      if (!finishedDate && wordCount >= 750) finishedDate = getCurrentDate();\n      dumpster.setItem(`trash/${id}`, {\n        content,\n        date,\n        wordCount,\n        finishedDate\n      })\n    }\n  }, 500);\n\n  const [finishedDate, setFinishedDate] = useState();\n  const loadProgress = (id) => {\n    dumpster.getItem(`trash/${id}`)\n      .then((res) => {\n        setText(res.content)\n        setCount(res.wordCount)\n        setFinishedDate(res.finishedDate)\n      })\n  }\n\n  const [trashId, setTrashId] = useState();\n  const [trashDate, setTrashDate] = useState();\n  useEffect(() => {\n    setLoading(true)\n    // TODO: delete line below\n    dumpster.iterate((value, key) => console.log(`${key}: ${JSON.stringify(value)}`))\n    const currDate = getCurrentDate()\n    dumpster.getItem('inProgress')\n      .then((res) => {\n        let trashInfo;\n        if (!res || (res && !isSameDay(res.date, currDate))) {\n          trashInfo = generateNewGarbage();\n        } else {\n          trashInfo = { id: res.id, date: res.date };\n          loadProgress(res.id)\n        }\n        setTrashId(trashInfo.id);\n        setTrashDate(trashInfo.date);\n        setLoading(false)\n      })\n  }, [])\n\n  /* handle notification when trash date is not current date */\n  const [dayChanged, setDayChanged] = useState(false)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (trashDate && !isSameDay(trashDate, getCurrentDate())) {\n        setDayChanged(true)\n      }\n    }, 30000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [trashDate])\n\n  /* Writing Actions */\n  const [text, setText] = useState('');\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const wordCount = countWords(text);\n    setCount(wordCount);\n    saveProgress({\n      id: trashId,\n      content: text,\n      date: trashDate,\n      finishedDate,\n      wordCount\n    });\n  }, [text, saveProgress, trashId, trashDate, finishedDate])\n\n  /* Progress */\n  const [progress, setProgress] = useState(0);\n  useEffect(() => {\n    const currProgress = Math.floor((count / 750) * 100)\n    setProgress(currProgress < 100 ? currProgress : 100);\n  }, [count])\n\n  return (\n    <div className={classes.root}>\n      <Container className={classes.container}>\n        <Collapse in={dayChanged}>\n          <SnackbarContent\n            classes={{ root: classes.infoRoot }}\n            message=\"This writing is from the past. Refresh this page to save it and start a new writing for today.\"\n            action={\n              <IconButton\n                edge=\"start\"\n                aria-label=\"Refresh Page\"\n                title=\"Refresh Page\"\n                onClick={() => {\n                  window.location.reload()\n                  return false\n                }}\n                classes={{\n                  colorPrimary: classes.refreshIcon\n                }}\n                color=\"primary\"\n              >\n                <RefreshIcon />\n              </IconButton>\n            }\n          />\n        </Collapse>\n        <Typography variant=\"h5\">{formatFullDate(trashDate)}</Typography>\n        <WritingArea\n          text={text}\n          setText={setText}\n          loading={loading}\n        />\n        {loading && <LinearProgress variant=\"indeterminate\" className={classes.loading} />}\n      </Container>\n      <div className={classes.footer}>\n        <div className={classes.progressWrapper}>\n          <LinearProgress className={classes.progress} variant=\"determinate\" value={progress} />\n          <div className={classes.count}>\n            <div>{count} words</div>\n            {progress === 100 && <CheckCircleIcon color=\"primary\" className={classes.progressIcon} />}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GarbageDump;\n","import dumpster from \"dumpster\";\nimport { getCurrentDate } from \"./date\";\n\nexport function generateNewGarbage() {\n  const date = getCurrentDate()\n  const id = date.toDateString() + Math.random() * 100; // do I even need this lol\n  dumpster.setItem('inProgress', {\n    id,\n    date,\n  })\n  dumpster.setItem(`trash/${id}`, {\n    content: '',\n    date,\n    wordCount: 0,\n  });\n  dumpster.getItem('dumpster')\n    .then((value) => {\n      let arrValue = value || [];\n      if (arrValue.indexOf(id) === -1) dumpster.setItem('dumpster', [...arrValue, id])\n    })\n  return { id, date }\n}","export function countWords(str = '') {\n  const trimmed = str.trim();\n  if (!trimmed) return 0;\n  return str.trim().split(/\\s+/).length;\n}\n","import React from 'react'\nimport { Dialog, DialogTitle, Typography, IconButton, DialogContent, Container, makeStyles } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport BackIcon from '@material-ui/icons/ChevronLeft'\nimport { formatFullDate } from 'util/date'\n\nconst useStyles = makeStyles((theme) => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n    '@media (max-width: 600px)': {\n      display: 'none',\n    },\n  },\n  dialogTitle: {\n    borderBottom: '2px solid lightgrey',\n    display: 'flex',\n    alignItems: 'center',\n\n    '& > button': {\n      marginRight: '4px',\n    }\n  },\n  dialogContent: {\n    whiteSpace: 'pre-wrap',\n  }\n}))\n\nconst TrashDetail = ({ selectedTrash, setSelectedTrash }) => {\n  const classes = useStyles()\n  return (\n    <Dialog\n      open={Boolean(selectedTrash)}\n      fullScreen\n      onClose={() => setSelectedTrash(null)}\n    // TransitionComponent={Transition} // TODO: set Transition to slide\n    >\n      <DialogTitle disableTypography>\n        <Typography variant=\"h6\" className={classes.dialogTitle} component=\"div\">\n          <IconButton\n            aria-label=\"close\"\n            onClick={() => setSelectedTrash(null)}\n          >\n            <BackIcon />\n          </IconButton>\n          <div>{selectedTrash && formatFullDate(selectedTrash.date)}</div>\n        </Typography>\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={() => setSelectedTrash(null)}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Container>\n          <div className={classes.dialogContent}>\n            {selectedTrash ? selectedTrash.content : ''}\n          </div>\n        </Container>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default TrashDetail\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { Container, Typography, makeStyles, Card, CardContent, CardActions, Button } from '@material-ui/core';\nimport dumpster from 'dumpster';\nimport { formatFullDate, printTimeCompletion } from 'util/date'\nimport TrashDetail from './TrashDetail';\n\nconst PAGE_SIZE = 10;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: 'calc(100vh - 64px)',\n    '@media (max-width: 600px)': {\n      height: 'calc(100vh - 56px)',\n    },\n    overflow: 'hidden'\n  },\n  title: {\n    borderBottom: '2px solid lightgrey',\n    marginTop: '18px',\n    paddingBottom: '6px',\n    width: '100%',\n  },\n  cardsContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: '6px',\n  },\n  card: {\n    flex: '0 1 30%',\n    margin: '16px 8px',\n    minWidth: '272px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  pagination: {\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: '8px'\n  },\n}))\n\nconst Archive = () => {\n  const classes = useStyles()\n\n  const [ids, setIds] = useState([]);\n  const [trashList, setTrashList] = useState([]);\n  useEffect(() => {\n    dumpster.getItem('dumpster')\n      .then(res => {\n        setIds([...res])\n      })\n  }, [])\n\n  const totalPage = Math.ceil(ids.length / 10);\n  const [page, setPage] = useState(1);\n  const getTrashList = useCallback(() => {\n    let firstIdx = PAGE_SIZE * (page - 1)\n    let lastIdx = PAGE_SIZE * page\n    const getGarbage = ids.slice(firstIdx, lastIdx).map(id => (\n      dumpster.getItem(`trash/${id}`)\n    ))\n    Promise.all(getGarbage)\n      .then((data) => {\n        setTrashList(data)\n      })\n  }, [ids, page])\n\n  useEffect(() => {\n    getTrashList();\n  }, [getTrashList, page])\n\n  const [selectedTrash, setSelectedTrash] = useState(null)\n\n  return (\n    <div className={classes.root}>\n      <TrashDetail selectedTrash={selectedTrash} setSelectedTrash={setSelectedTrash} />\n      <Container>\n        <Typography variant=\"h4\" className={classes.title}>Archive</Typography>\n        <div className={classes.cardsContainer}>\n          {trashList.map(data => {\n            const fullDate = data && formatFullDate(data.date)\n            return (\n              <Card\n                classes={{ root: classes.card }}\n                key={fullDate}\n              >\n                <CardContent>\n                  <Typography variant=\"h5\">\n                    {fullDate}\n                  </Typography>\n                  <Typography>\n                    {data && data.content.length > 21 ? data.content.slice(0, 21) + '...' : data.content}\n                  </Typography>\n                  <Typography>\n                    Words Count: {data.wordCount} words\n                  </Typography>\n                  {data.wordCount >= 750 && (\n                    <Typography>\n                      Time Completion: {printTimeCompletion(data.date, data.finishedDate)}\n                    </Typography>\n                  )}\n                </CardContent>\n                <CardActions>\n                  <Button size=\"small\" onClick={() => setSelectedTrash({ ...data })}>Open</Button>\n                </CardActions>\n              </Card>\n            )\n          })}\n        </div>\n        <div className={classes.pagination}>\n          <Button\n            disabled={page === 1}\n            onClick={() => setPage(page - 1)}\n          >\n            &lt; Prev\n        </Button>\n          <div>\n            {page} of {totalPage}\n          </div>\n          <Button\n            disabled={page === totalPage}\n            onClick={() => setPage(page + 1)}\n          >\n            Next &gt;\n        </Button>\n        </div>\n      </Container>\n    </div>\n  )\n}\n\nexport default Archive;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport GarbageDump from './components/GarbageDump/GarbageDump';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport { Drawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport Archive from 'components/Archive/Archive';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: 'relative',\n    minHeight: '100vh',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n    marginTop: 16,\n  }\n}));\n\nexport default function App(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [openDrawer, setOpenDrawer] = useState(false)\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            className={classes.menuButton}\n            onClick={() => setOpenDrawer(true)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Brain Dumpster\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        anchor=\"left\"\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n      >\n        <div\n          className={classes.list}\n          role=\"presentation\"\n          onClick={() => setOpenDrawer(false)}\n          onKeyDown={() => setOpenDrawer(false)}\n        >\n          <List>\n            <ListItem\n              button\n              selected={window.location.pathname === '/'}\n              onClick={() => history.push('/')}\n            >\n              <ListItemIcon><DeleteIcon /></ListItemIcon>\n              <ListItemText primary=\"Brain Dump\" />\n            </ListItem>\n            <ListItem\n              button\n              selected={window.location.pathname === '/archive'}\n              onClick={() => history.push('/archive')}\n            >\n              <ListItemIcon><FolderIcon /></ListItemIcon>\n              <ListItemText primary=\"Garbage Archive\" />\n            </ListItem>\n          </List>\n        </div>\n      </Drawer>\n      <Switch>\n        <Route exact path=\"/\">\n          <GarbageDump />\n        </Route>\n        <Route exact path=\"/archive\">\n          <Archive />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}